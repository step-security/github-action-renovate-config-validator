name: Validate Renovate Configuration with renovate-config-validator
author: step-security
branding:
  icon: check
  color: yellow
description: |
  Validate Renovate Configuration with renovate-config-validator.
  npx is required.
inputs:
  strict:
    description: Either true of false. If it's true, renovate-config-validator's --strict option is set
    default: "true"
    required: false
  validator_version:
    description: version of renovate-config-validator. By default, the latest version is used.
    required: false
  config_file_path:
    description: |
      Renovate Configuration file
      By default, the following files are validated.

      - .github/renovate.json
      - .github/renovate.json5
      - .gitlab/renovate.json
      - .gitlab/renovate.json5
      - .renovaterc.json
      - .renovaterc.json5
      - renovate.json
      - renovate.json5
      - .renovaterc

      You can specify multiple files by multiple lines.
    required: false
runs:
  using: composite
  steps:
    - name: validate subscription
      run: |
        # validate subscription status
        API_URL="https://agent.api.stepsecurity.io/v1/github/$GITHUB_REPOSITORY/actions/subscription"

        # Set a timeout for the curl command (3 seconds)
        RESPONSE=$(curl --max-time 3 -s -w "%{http_code}" "$API_URL" -o /dev/null) || true
        CURL_EXIT_CODE=$?

        # Decide based on curl exit code and HTTP status
        if [ $CURL_EXIT_CODE -ne 0 ]; then
          echo "Timeout or API not reachable. Continuing to next step."
        elif [ "$RESPONSE" = "200" ]; then
          :
        elif [ "$RESPONSE" = "403" ]; then
          echo "Subscription is not valid. Reach out to support@stepsecurity.io"
          exit 1
        else
          echo "Timeout or API not reachable. Continuing to next step."
        fi
      shell: bash

    - name: Validate Renovate Configuration with renovate-config-validator
      run: |
        set -eu
        pkg=renovate

        opts=""
        if [ "$STRICT" = "true" ]; then
          opts=--strict
        elif [ "$STRICT" != "false" ]; then
          echo '::error:: the input "strict" must be "true" or "false"'
          exit 1
        fi

        if [ -n "$VALIDATOR_VERSION" ]; then
          pkg="renovate@$VALIDATOR_VERSION"
        fi

        if [ -n "$CONFIG_FILE_PATH" ]; then
          files=$(echo "$CONFIG_FILE_PATH" | tr '\n' ' ')
          echo "===> npx --yes --package \"$pkg\" -c \"renovate-config-validator $opts $files\"" >&2
          npx --yes --package "$pkg" -c "renovate-config-validator $opts $files"
          exit 0
        fi

        files=""
        for file in .github/renovate.json .github/renovate.json5 .gitlab/renovate.json .gitlab/renovate.json5 .renovaterc.json .renovaterc.json5 renovate.json renovate.json5 .renovaterc; do
          if [ -f "$file" ]; then
            files="$files $file"
          fi
        done
        if [ -z "$files" ]; then
          echo "===> No configuration file is found" >&2
          exit 0
        fi

        echo "===> npx --yes --package \"$pkg\" -c \"renovate-config-validator $opts $files\"" >&2
        npx --yes --package "$pkg" -c "renovate-config-validator $opts $files"
      shell: bash
      env:
        VALIDATOR_VERSION: ${{inputs.validator_version}}
        CONFIG_FILE_PATH: ${{inputs.config_file_path}}
        STRICT: ${{inputs.strict}}
